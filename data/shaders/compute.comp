#version 450

const float infinity = 1. / 0.;

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba8) uniform image2D resultImage;

layout (binding = 1) uniform Camera {
    mat4 view;
    mat4 inverseProjection;
    vec3 position;
} uCamera;

struct Ray {
    vec3 origin;
    vec3 direction;
    vec3 energy;
};

struct RayHit {
    vec3 position;
    float distance;
    vec3 normal;
};

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = vec3(0.0f, 0.0f, 0.0f);
    hit.distance = infinity;
    hit.normal = vec3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateRay(vec3 origin, vec3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = vec3(1);
    return ray;
}

Ray CreateCameraRay(vec2 uv) {
    // Transform the camera origin to world space
    vec3 origin = uCamera.position;

    // Invert the perspective projection of the view-space position
    vec3 direction = (uCamera.inverseProjection * vec4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = normalize((vec4(direction, 0.0f) * uCamera.view).xyz);
    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = vec3(0.0f, 1.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, vec4 sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    vec3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2sqr < 0)
    return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    IntersectSphere(ray, bestHit, vec4(-4, 8.0f, -10, 8.0f));
    IntersectSphere(ray, bestHit, vec4(12, 3.0f, -10, 3.0f));
    return bestHit;
}

vec3 Shade(inout Ray ray, RayHit hit) {
    if (hit.distance < infinity) {
        vec3 specular = vec3(0.6f, 0.6f, 0.6f);
        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;
        // Return nothing
        return vec3(0.0f, 0.0f, 0.0f);
    }
    else {
        ray.energy = vec3(0);
        return vec3(ray.direction * 0.5f + 0.5f);
    }
}


void main() {
    ivec2 texSize = imageSize(resultImage);
    ivec2 id = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    vec2 uv = vec2((id.xy + vec2(0.5f)) / vec2(texSize.x, texSize.y) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    vec3 result = vec3(0);
    for (int i = 0; i < 8; i++) {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (ray.energy == vec3(0))
            break;
    }

    imageStore(resultImage, id, vec4(result, 1.0f));
}
